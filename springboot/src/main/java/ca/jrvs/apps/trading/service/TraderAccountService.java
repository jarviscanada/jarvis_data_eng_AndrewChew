package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

  private TraderDao traderDao;
  private AccountDao accountDao;
  private SecurityOrderDao securityOrderDao;
  private PositionDao positionDao;

  @Autowired
  public TraderAccountService(TraderDao traderDao, AccountDao accountDao,
      SecurityOrderDao securityOrderDao, PositionDao positionDao) {
    this.traderDao = traderDao;
    this.accountDao = accountDao;
    this.securityOrderDao = securityOrderDao;
    this.positionDao = positionDao;
  }

  /**
   * Create a new trader and initialize a new account with 0 amount.
   *  - Validate user input (all fields must be non-empty)
   *  - Create a trader
   *  - Create an account
   *  - Create, setup, and return a new TraderAccountView
   * Assumption: For simplification, each trader has only one account where traderId == accountId
   *
   * @param trader cannot be null. All fields cannot be null except for id (auto-generated by db)
   * @return TraderAccountView for this trader
   * @throws IllegalArgumentException if a trader has null fields or id is not null
   */
  public TraderAccountView createTraderAndAccount(Trader trader) {
    // TODO
    return null;
  }

  /**
   * A trader can be deleted iff it has no open positions and 0 cash balance.
   *  - Validate traderId
   *  - Get trader account by traderId and check account balance
   *  - Get positions by accountId and check positions
   *  - Delete all securityOrders, account, trader (in this order)
   *
   * @param traderId of trader to be deleted, cannot be null
   * @throws IllegalArgumentException if traderId is null or not found or unable to delete
   */
  public void deleteTraderById(Integer traderId) {
    // TODO
  }

  /**
   * Deposit a fund to an account of trader with traderId.
   *  - Validate user input
   *  - account = accountDao.findByTraderId
   *  - accountDao.updateAmountById
   *
   * @param traderId of trader depositing funds, cannot be null
   * @param fund amount to deposit, must be greater than 0
   * @return updated Account of trader
   * @throws IllegalArgumentException if traderId is null or not found or fund is <= 0
   */
  public Account deposit(Integer traderId, Double fund) {
    // TODO
    return null;
  }

  /**
   * Withdraw a fund to an account of trader with traderId.
   *  - Validate user input
   *  - account = accountDao.findByTraderId
   *  - accountDao.updateAmountById
   *
   * @param traderId of trader withdrawing funds, cannot be null
   * @param fund amount to withdraw, must be greater than 0
   * @return updated Account of trader
   * @throws IllegalArgumentException if traderId is null or not found or fund is <= 0 or
   *                                  insufficient funds
   */
  public Account withdraw(Integer traderId, Double fund) {
    // TODO
    return null;
  }
}
